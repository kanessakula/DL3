import sys
import yt_dlp
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLineEdit, QLabel, QFileDialog
from PyQt6.QtGui import QPalette, QColor, QFont
from PyQt6.QtCore import Qt

class YouTubeDownloader(QWidget):
    def __init__(self):
        super().__init__()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î
        self.setWindowTitle("YouTube Video Downloader")
        self.setGeometry(100, 100, 400, 300)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(30, 30, 30))
        palette.setColor(QPalette.ColorRole.WindowText, QColor("white"))
        self.setPalette(palette)

        # ‡∏ï‡∏±‡πâ‡∏á layout
        layout = QVBoxLayout()

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QLineEdit
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube...")
        self.url_input.setStyleSheet("background-color: #333; color: white; border-radius: 5px; padding: 5px;")
        self.url_input.setFont(QFont("Arial", 12))
        layout.addWidget(self.url_input)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        self.download_video_button = QPushButton("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        self.download_video_button.setStyleSheet("""
            background-color: #28a745;
            color: white;
            border-radius: 5px;
            padding: 10px;
            font-size: 14px;
        """)
        self.download_video_button.clicked.connect(self.download_video)
        layout.addWidget(self.download_video_button)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î MP3
        self.download_mp3_button = QPushButton("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î MP3")
        self.download_mp3_button.setStyleSheet("""
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            padding: 10px;
            font-size: 14px;
        """)
        self.download_mp3_button.clicked.connect(self.download_mp3)
        layout.addWidget(self.download_mp3_button)

        # QLabel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        self.status_label = QLabel("")
        self.status_label.setFont(QFont("Arial", 12))
        self.status_label.setStyleSheet("color: white;")
        layout.addWidget(self.status_label)

        self.setLayout(layout)

    def download_video(self):
        url = self.url_input.text()
        if not url:
            return

        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
        self.status_label.setText("")

        save_path = QFileDialog.getExistingDirectory(self, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        if not save_path:
            return

        self.status_label.setText("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")

        ydl_opts = {
            "format": "best[ext=mp4]",
            "outtmpl": f"{save_path}/%(title)s.%(ext)s",
            "progress_hooks": [self.progress_hook],  # ‡πÉ‡∏ä‡πâ hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        }
        self._download(url, ydl_opts)

    def download_mp3(self):
        url = self.url_input.text()
        if not url:
            return

        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
        self.status_label.setText("")

        save_path = QFileDialog.getExistingDirectory(self, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å MP3")
        if not save_path:
            return

        self.status_label.setText("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î MP3...")

        ydl_opts = {
            "format": "bestaudio[ext=m4a]",
            "outtmpl": f"{save_path}/%(title)s.%(ext)s",
            "progress_hooks": [self.progress_hook],  # ‡πÉ‡∏ä‡πâ hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        }
        self._download(url, ydl_opts)

    def progress_hook(self, d):
        if d["status"] == "downloading":
            percent = d["downloaded_bytes"] / d["total_bytes"] * 100
            self.status_label.setText(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î... {percent:.2f}%")

        elif d["status"] == "finished":
            self.status_label.setText("‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

    def _download(self, url, ydl_opts):
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            self.status_label.setText(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = YouTubeDownloader()
    window.show()
    sys.exit(app.exec())
